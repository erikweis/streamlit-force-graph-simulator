{"version":3,"sources":["Graph.tsx","index.tsx"],"names":["withStreamlitConnection","props","args","data","events","time_interval","graphprops","initial_data","nodes","links","useState","network","time","statedata","setData","useEffect","Streamlit","setFrameHeight","interval","setInterval","length","events_list","e","event_type","node","filter","item","id","source","find","n","target","newlink","attributes","directed","link","propt","graph","clearInterval","graphData","engine","Styletron","ReactDOM","render","StrictMode","value","document","getElementById"],"mappings":"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","file":"static/js/main.a0c30abb.chunk.js","sourcesContent":["import React, { useEffect,useCallback, useState } from \"react\";\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { runInThisContext } from \"vm\";\nimport { setConstantValue } from \"typescript\";\n\nconst Graph = (props: ComponentProps) => {\n  /**\n   * Destructuring JSON objects is a good habit.\n   * This will look for label, minValue and maxValue keys\n   * to store them in separate variables.\n   */\n  const {data, events, time_interval, graphprops} = props.args;\n\n  let time=0;\n  let initial_data = { nodes:data.nodes, links:data.links }\n  const [statedata, setData] = useState({network:initial_data,time:time});\n\n  useEffect(() => Streamlit.setFrameHeight());\n\n  useEffect(() => {\n    let interval = setInterval(() => {      \n      setData((statedata)=>{\n        let network = statedata.network;\n        let time = statedata.time;\n        \n        if (time%events.length === 0) {\n          network = initial_data\n        }\n\n        let nodes = network.nodes;\n        let links = network.links;\n\n        //set events list\n        let events_list;\n        if (events.length>0){\n          events_list = events[time%events.length];\n        } else {\n          events_list = []\n        }\n\n        for (var e of events_list) {\n\n          if (e.event_type === 'add_node') {\n            nodes = [...nodes,e.node]\n          } else if (e.event_type === 'remove_node'){\n            nodes = nodes.filter((item: any)=>item.id !== e.id)\n          } else if (e.event_type === 'add_link'){\n            let source = nodes.find((n:any)=>(n.id === e.source))\n            let target = nodes.find((n:any)=>(n.id === e.target))\n            let newlink = {...e.attributes,source:source,target:target}\n            links = [...links,newlink]\n          } else if (e.event_type === 'remove_link'){\n            if (e.directed === 'true'){\n              links = links.filter((item:any)=>((item.source.id !== e.source) && (item.target.id !== e.target)))\n            } else {\n              let length_before = links.length;\n              links = links.filter((link:any)=>{\n                if ((link.source.id === e.source) && (link.target.id === e.target)) {\n                  return false\n                } else if ((link.source.id == e.target) && (link.target.id === e.source)){\n                  return false\n                } else {\n                  return true\n                }\n              });\n              //console.log(links.length-length_before);\n            }\n            \n          } else if(e.event_type=== 'node_attributes'){\n            for (var n of nodes){\n              if (n.id === e.id){\n                for (var propt in e.attributes){\n                  n[propt]=e.attributes[propt]\n                }\n              }\n            }\n          } else if(e.event_type === 'link_attributes'){\n            let link = links.find((item:any)=>((item.source.id === e.source) && (item.target.id === e.target)))\n            for (var propt in e.attributes){\n              link[propt]=e.attributes[propt]\n            }\n          } else if (e.event_type === 'new_graph'){\n            //console.log(e.graph)\n            nodes = e.graph.nodes;\n            links = e.graph.links;\n          }\n        }\n\n        time++;\n        //console.log(time)\n        let new_data = {\n          nodes:nodes, \n          links:links\n        };\n\n        return {network:new_data,time:time};\n      });\n      \n    },time_interval,[statedata,events,initial_data]);\n    return () => {\n      clearInterval(interval);\n    };\n  },[statedata,events,time_interval,initial_data]);\n\n\n  // Add a label and pass min/max variables to the baseui Slider\n  return (\n    <>\n        <ForceGraph2D\n            graphData={statedata.network}\n            {...graphprops}\n        />\n    </>\n  );\n};\n\nexport default withStreamlitConnection(Graph);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Graph from \"./Graph\";\n\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\n\nconst engine = new Styletron();\n\n// Wrap your CustomSlider with the baseui light theme\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <Graph />\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}