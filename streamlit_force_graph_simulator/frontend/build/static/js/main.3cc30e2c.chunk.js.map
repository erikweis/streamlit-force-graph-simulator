{"version":3,"sources":["Graph.tsx","index.tsx"],"names":["withStreamlitConnection","props","args","initial_graph","events","time_interval","graphprops","continuous_play","directed","initial_data","nodes","links","useState","network","time","paused","statedata","setData","useEffect","Streamlit","setFrameHeight","interval","setInterval","events_list","length","e","event_type","node","filter","item","id","source","target","find","n","newlink","attributes","propt","link","graph","clearInterval","simulation_panel","Button","onClick","variant","graphData","engine","Styletron","ReactDOM","render","StrictMode","value","document","getElementById"],"mappings":"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","file":"static/js/main.3cc30e2c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport ForceGraph2D from 'react-force-graph-2d';\nimport Button from \"react-bootstrap/Button\";\nimport { Play, Pause,ArrowCounterclockwise} from 'react-bootstrap-icons';\n\nconst Graph = (props: ComponentProps) => {\n\n  const {initial_graph, events, time_interval, graphprops, continuous_play, directed} = props.args;\n\n  let time=0;\n  let initial_data = { nodes:initial_graph.nodes, links:initial_graph.links }\n  const [statedata, setData] = useState({network:initial_data,time:time,paused:true});\n\n  useEffect(() => Streamlit.setFrameHeight());\n\n  // play pause from button\n  let playpause = () => {\n    setData((statedata)=>{\n      \n      // time should be reset if pressing play after previous simulation finished\n      var network = statedata.network;\n      var time = statedata.time;\n      if (time === events.length && statedata.paused) {\n        network = initial_data\n        time = 0\n      }\n\n      return {\n        network:network,\n        time:time,\n        paused: !statedata.paused\n      }\n    })\n  };\n\n  // reset from reset button press\n  let reset = () => {\n    setData((statedata)=>{\n      return {\n        network:initial_data,\n        time:0,\n        paused:true\n      }\n    })\n  }\n\n  //listen for prop changes and reset state\n  useEffect(()=>{\n    setData({network:initial_graph,time:0,paused:true})\n  },[initial_graph,events, time_interval, graphprops, continuous_play]);\n\n  useEffect(() => {\n    let interval = setInterval(() => {      \n      setData((statedata)=>{\n\n        if (statedata.paused===false) {\n\n          /////////// advance simulation ///////////\n          let network = statedata.network;\n          let time = statedata.time;\n          \n          // reset network at beginning\n          if (time === 0) {\n            network = initial_data\n          } \n          // at end of simulation\n          else if (time === events.length) {\n            // if continuous_play, keep going\n            if (continuous_play) {\n              return {\n                network: initial_data,\n                time:0,\n                paused:false\n              }\n            }\n            //pause simulation and reset time to zero\n            return {\n              network: network,\n              time: time,\n              paused: true\n            }\n          }\n\n          //set events list\n          let events_list;\n          if (events.length>0){\n            events_list = events[time%events.length];\n          } else {\n            events_list = []\n          }\n          \n          //all events\n          let nodes = network.nodes;\n          let links = network.links;\n\n          for (var e of events_list) {\n\n            if (e.event_type === 'add_node') {\n              nodes = [...nodes,e.node]\n            } else if (e.event_type === 'remove_node'){\n              nodes = nodes.filter((item: any)=>item.id !== e.id)\n              links = links.filter((item: any)=>(item.source.id !== e.id && item.target.id !== e.id))\n            } else if (e.event_type === 'add_link'){\n              let source = nodes.find((n:any)=>(n.id === e.source))\n              let target = nodes.find((n:any)=>(n.id === e.target))\n              let newlink = {...e.attributes,source:source,target:target}\n              links = [...links,newlink]\n            } else if (e.event_type === 'remove_link'){\n              //filter links\n              links = links.filter((item:any)=>{\n                if (item.source.id === e.source && item.target.id === e.target) {\n                  return false\n                }\n                if (item.source.id === e.target && item.target.id === e.source) {\n                  return false\n                }\n                return true\n              });\n            } else if(e.event_type=== 'node_attributes'){\n              for (var n of nodes){\n                if (n.id === e.id){\n                  for (var propt in e.attributes){\n                    n[propt]=e.attributes[propt]\n                  }\n                }\n              }\n            } else if(e.event_type === 'link_attributes'){\n\n              //find link\n              let link = links.find((item:any)=>{\n                if ((item.source.id === e.source) && (item.target.id === e.target)){\n                  return true\n                }\n                if (directed && item.source.id === e.target && item.target.id === e.source){\n                  return true\n                }\n                return false\n              });\n\n              // add attributes to link\n              for (var propt in e.attributes){\n                link[propt]=e.attributes[propt]\n              }\n            } else if (e.event_type === 'new_graph'){\n              nodes = e.graph.nodes;\n              links = e.graph.links;\n            }\n          }\n\n          //advance time \n          time++;\n          \n          return {\n            network:{nodes:nodes, links:links},\n            time:time,\n            paused:statedata.paused\n          };\n        } else {\n          return statedata;\n        }\n      });\n      \n    },time_interval,[statedata,events,initial_data]);\n    return () => {\n      clearInterval(interval);\n    };\n  },[statedata,events,time_interval,initial_data,continuous_play]);\n\n  let simulation_panel = <>\n    <Button onClick={playpause} variant={\"light\"}>{statedata.paused ? <Play/> : <Pause/>}</Button>\n    <Button onClick={reset} variant={'light'}><ArrowCounterclockwise/></Button>\n    <p>{statedata.time}/{events.length}</p>\n  </>\n\n  // Add a label and pass min/max variables to the baseui Slider\n  return (\n    <>\n      {events.length > 0 ? simulation_panel : <></>}\n      <ForceGraph2D graphData={statedata.network} {...graphprops}/>\n    </>\n  );\n};\n\nexport default withStreamlitConnection(Graph);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Graph from \"./Graph\";\n\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\n\nconst engine = new Styletron();\n\n// Wrap your CustomSlider with the baseui light theme\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <Graph />\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}